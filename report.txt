Rachel Hagan & Taylor Geither
EECS 678: Introduction to Operating Systems
February 26, 2016
Quash

Our Quash program is able to handle many of the basic tasks that any bash or command shell can handle.

When commands are input into Quash, it uses strtok() to tokenize them into parseable statements. Because of this, it does rely on spaces between arguments (for example, ./quash < testCommands.txt would start quas with testCommands' contents taken as input, but ./quash<testCommands.txt would not), which follows the writeup for the assignment but does not follow exactly how bash would work. When receiving new commands, the program enters a while loop in order to populate a queue with the tokens it must run later. In the while loop, the program first checks if a redirection character is present (< or >). If so, it must update the tempArg variable in order to change its behavior later on. If not, it simply stores the arguiments. It then enters a large if/else block that parses and executes commands. 

Given "exit" or "quit," the program will terminate.

Given "set," the program will copy the environment of the first variable into the second variable, effectively setting the variable as equal to the value passed in.

Given "cd," the program will check for the number of arguments in order to differentiate between, for example, "cd" and "cd /EECS_678/". If only one argument (cd) is given, the program will use chdir() and getenv("HOME") to change the directory to that of HOME. If there are two arguments, the program will simply change the directory to whatever the user input as their second argument.

The "echo" command works similarly to "cd" except for that it prints the environment of HOME or PATH depending on if the user input "echo $HOME" or "echo $PATH". Using getenv() the program then simply printf()s the value.

The "pwd" command is also simple, and uses getcwd() to print the absolute path of the current working directory.

The "jobs" command prints out all of the current background jobs by starting at the head of the linked list of jobs and iterating through each, printing out their attributes as it goes, until it reaches the last one.

The "pipe" command is implemented by creating the "isPipe" variable that is updated depending on if a | is found in the input line. If so, the program controls the output of the initial argument to be used as the input to the second argument using a call to dup2().

If the user inputs something other than the supported commands listed above, then the program assumes that they are meaning to run an executable. It forks a child, gives the child the same environment as the parent, and searches within the environment for an executable file by tokenizing the path based on "/" characters and continuing to search folders until an executable by the given name is found. In this way, it can run executables given with absolute paths starting with / or that are located within the path and given as ./program_name. If no executable is found, then an error message is printed. It is here that, if the user used redirection commands, dup2() is used to redirect input or output.

A linked list structure allows for background execution of processes. The program tracks when background processes are added, by setting a flag whenever the program forks a new child.

Our program was tested by using it as one would a bash. We included several test files, testCommands.txt, testProg.c, testProg2.c, pipeTest1.c and pipeTest2.c. These test programs must be compiled outside of compiling Quash, as Quash does not include a compiler and our makefile does not compile the extra files.

testProg.c has a very long for loop that allows us to test if the program is able to run background processes correctly. This allows us to test the jobs function as well. testProg2.c takes one argument at command line and is thus able to test whether executables are able to be run with arguments in Quash.

pipeTest1.c outputs a 1 when it is called, and pipeTest2.c outputs a success message if the input passed into it is a 1, therefore checking if the pipe function works when ./pipeTest1 | ./pipeTest2 is used.

A testCommands.txt file was created that includes commands that can be used in Quash and was used for testing whether the program was able to read input from a file. We also created .txt files for testing and piped input in or out of them, for example, by redirecting input of pwd into a.txt and observing that the output of pwd is then saved to a.txt.

Other methods like "exit," "cd," and "echo" were easy to test simply by using them. 